#include <iostream>
using namespace std;

template<typename T>
class Stack
{
public:
	int capacity = 10;
	T* array = new T[capacity];
	int top = -1;
	Stack()
	{

	}

	bool eof()
	{
		if (top > -1)
			return false;
		else
			return true;
	}
	void Push(T insert)
	{
		top++;
		array[top] = insert;
	}

	T TopElement()
	{
		return array[top];
	}

	T Pop()
	{
		return array[top--];
	}
	void PrintStack()
	{
		for (int i = top; i >= 0; i--)
		{
			cout << array[i] << " ";
		}
	}
};


int Transfer(char postfix[])
{
	Stack<char> stack;
	bool cont = true;
	int index = 0;
	int num1, num2, total;
	char toChar;
	while (cont)
	{
		switch (postfix[index])
		{
		case '\0':
			cont = false;
			break;
		case '+':case '-':case '*': case '/':
			num2 = stack.Pop() - '0';
			num1 = stack.Pop() - '0';
			
			switch (postfix[index])
			{
			case '+':
				total = num1 + num2;
				break;
			case '-':
				total = num1 - num2;
				break;
			case '*':
				total = num1 * num2;
				break;
			case '/':
				total = num1 / num2;
				break;
			}
			toChar = total + '0';
			stack.Push(toChar);
			break;
		default:
			stack.Push(postfix[index]);
			break;
		}
		index++;
	}
	return stack.Pop() - '0';
}


int main(int argc, char *argv[])
{
	char itemset[20];
	cin.getline(itemset, 20);
	cout << Transfer(itemset);
	
}

