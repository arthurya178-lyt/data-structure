#include <iostream>
using namespace std;
int **arr, start, spot, amount;
int *done, locate = -1,findLocate = 0;
bool exist(int target)
{
	for (int i = 0; i <= locate; i++)
	{
		if (done[i] == target)
			return true;
	}
	return false;
}
bool othLink(int s)
{
	for (int i = 0; i < amount; i++)
	{
		if (arr[i][0] == s || arr[i][1] == s)
			return true;
	}
	return false;
}
int getLink(int s)
{
	int retValue = -1;
	for (int i = 0; i < amount; i++)
	{
		if (arr[i][0] == s)
		{
			retValue = arr[i][1];
			arr[i][0] = 0;
			arr[i][1] = 0;
			break;
		}
		else if (arr[i][1] == s)
		{
			retValue = arr[i][0];
			arr[i][0] = 0;
			arr[i][1] = 0;
			break;
		}
	}
	return retValue;
}
void initial(int arr1_dim1,int arr2_dim1)
{
	arr = new int*[arr1_dim1];
	for (int i = 0; i < arr1_dim1; i++)
	{
		arr[i] = new int[2]{ 0 };
	}
	done = new int[arr2_dim1];
}
void print()
{
	for (int i = 0; i < spot; i++)
	{
		cout << done[i] << " ";
	}
}
void BFS(int i)
{
	while (othLink(i))
	{
 		int get = getLink(i);
		if (!exist(get))
			done[++locate] = get;
	}
	if(locate != spot-1)
		BFS(done[++findLocate]);
}
int main()
{
	cin >> start >> spot >> amount;
	initial(amount,spot);
	for (int i = 0; i < amount; i++)
		cin >> arr[i][0] >> arr[i][1];
	done[++locate] = start;
	BFS(start);
	print();
}
